K-Task outline

Functions:
    Basic: Add, search, and delete tasks
    Advanced: Add tasks to google calendar, create tasks from tickets, send reminders about tickets

Decomposition:
    Task?: Name, Description, Priority, Due Date
    Storage Type?: Hash map? Hash Table? Database?
    Interface:
        Simple: CLI
        Advanced: GUI

Program Logic:
    User starts program
    Prompt opens with list of commands (help)
    User selects command
        Selections: add task, delete task, edit task
        -> add task: prompt for task name, description, priority, and due date
           technical details: entry is keyed by name, values are description, priority, and due date
        -> search task: prompt for task name
           technical details: hash function employed to retrieve key, if found, display task
           if not, display not found error
        -> delete task: prompt for task name
           technical details: hash function employed to retrieve key, if found, ask for verification,
           then dereference key if y is struck, if not, display not found error

Psuedocode:
    public class data
            string name
            string description
            bool complete
            int priority
            time_point due date

    public data()
        name = null
        description = null
        complete = false
        priority = 0
        due date = 0

    hash_map stor

    add_record(name, description, priority, due_date)
        hash table
            for i in range hash table size
            if id is not in hash table:
                key = id
                value = name, description, priority, due_date

    search_records(query)
        for i in range hash table size
            hash search method
            if query == value
                return key
            else
                print(none found!)
                return None


    delete_record(query)
        for i in range hash table size
            hash search method
            if query == value
                key = Null
            else
                print(none found!)

    convert_time(time)
        if time is in format 00/00/00
            time = time point
        else
            print invalid message
        return time

    main()
        Display help
        program loop:
            REPL



